{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "WithdrawMsg",
  "type": "object",
  "required": [
    "fee",
    "nullifier_hash",
    "proof",
    "recipient",
    "relayer",
    "root"
  ],
  "properties": {
    "fee": {
      "$ref": "#/definitions/Uint128"
    },
    "nullifier_hash": {
      "type": "string"
    },
    "proof": {
      "$ref": "#/definitions/CircomProof"
    },
    "recipient": {
      "type": "string"
    },
    "relayer": {
      "type": "string"
    },
    "root": {
      "type": "string"
    }
  },
  "definitions": {
    "CircomProof": {
      "type": "object",
      "required": [
        "curve",
        "pi_a",
        "pi_b",
        "pi_c",
        "protocol"
      ],
      "properties": {
        "curve": {
          "type": "string"
        },
        "pi_a": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pi_b": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "pi_c": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
